name: Release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-20.04, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: npm ci

      - name: Sync version
        run: npm run sync-version

      - name: Build frontend
        run: npm run build

  release:
    needs: test
    runs-on: windows-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: npm ci

      - name: Get version from package.json
        id: version
        run: |
          $version = (Get-Content package.json | ConvertFrom-Json).version
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "tag=v$version" >> $env:GITHUB_OUTPUT

      - name: Check if tag exists
        id: tag_check
        run: |
          $tagExists = git tag -l "v${{ steps.version.outputs.version }}"
          if ($tagExists) {
            echo "exists=true" >> $env:GITHUB_OUTPUT
          } else {
            echo "exists=false" >> $env:GITHUB_OUTPUT
          }

      - name: Build Tauri app
        if: steps.tag_check.outputs.exists == 'false'
        run: npm run tauri:build

      - name: Create Release
        if: steps.tag_check.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.version }}
          body: |
            ## 🚀 新版本发布 v${{ steps.version.outputs.version }}
            
            ### 📦 下载
            - Windows: 下载 `.msi` 安装包
            
            ### 🔄 更新内容
            - 自动构建和发布
            - 性能优化和bug修复
            
            ### 📋 安装说明
            1. 下载对应平台的安装包
            2. 以管理员权限运行安装程序
            3. 按照安装向导完成安装
            
            **注意**: 本应用需要管理员权限来修改系统环境变量。
          draft: false
          prerelease: false
          files: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifacts
        if: steps.tag_check.outputs.exists == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe
          retention-days: 30